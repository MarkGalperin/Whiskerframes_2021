%% POST-PROCESSING DATA
% Here I'll try running trajectories generated by the optimization
% experiment and ry to smooth them (using filters, etc.) and then see how
% the error changes as a result!

clear;
clf;
clc;

%% Include files
addpath('../src')
addpath('../src/deming')
addpath('../src/preprocess');
addpath('../src/optimization');
addpath('../src/circle_fit')

%% Which post-processes are we running?
% true = perform this pre-process and write files. false = don't
run_animate = 1;
run_filter = 0;
run_batchfilter = 0;
RUN = [run_animate,...
       run_filter,...
       run_batchfilter]; %add as needed
    
%% ANIMATE TRAJECTORIES
%
if RUN(1)
%     loadstr = '../output/trial_data/Oct7_Mar17.mat';  
%     loadstr = '../output/trial_data/3dof_restest8.mat'; 
%     loadstr = '../output/trial_data/post_filtered/Oct7_postfilt.mat'; 
%     loadstr = '../output/trial_data/bias/one/test1.mat'; 
%     loadstr = '../output/trial_data/bias/two/Sept28_test2.mat'; 
%     loadstr = '../output/trial_data/BATCH_Oct19/BatchSet_15/D15_C001.mat';    
%     loadstr = '../output/trial_data/BATCH_1dof_Nov27/BatchSet_15/D15_C007.mat';
    loadstr = '../output/trial_data/BATCH_3dof_Nov23/BatchSet_14/D14_C008.mat';
%     loadstr = '../output/trial_data/Sept24_reset_nocon3.mat';

    TRIAL = load(loadstr);
    TRIAL.file = 'Nov23_3dof_C8';
    % Generate Animation
    complete = optimization_animate(TRIAL); %automatically saves to output/movies/optimization/
end

%% POST-FILTER TRAJECTORIES
if RUN(2)
    %get trial data
    loadstr = '../output/trial_data/Oct7_Mar17.mat'; 
    fileout = 'Oct7_postfilt';
    Tstruct = load(loadstr);
    PTS = Tstruct.PTS_bio;
    ANG = Tstruct.ANG_bio;
    ypts = PTS(2,:,1); %assuming these are constant (MSE data)
    
    % get trajectory info
    traj = Tstruct.traj; %[T,N]
    prot = traj2prot(traj,Tstruct.s,ypts); %prot is [T,N]
    
    %apply low-pass bwfilt to the trajectory
    sfreq = 500; %500 fps video
    freq = 50; %Hz
    traj_f = bwfilt(traj,sfreq,0,freq);
    
    %get new protractions
    prot_f = traj2prot(traj_f,Tstruct.s,ypts); %prot is [T,N]
    
    %calculate error
    error_f = prot2error(prot_f,ANG,'abs','sum');
    
    %re-package TRIAL as TRIAL_f
    TRIAL_f = Tstruct;
    TRIAL_f.traj = traj_f;
    TRIAL_f.error = error_f;
    
    %save TRIAL_f 
    file_trial = append('../output/trial_data/post_filtered/',fileout);
    save(file_trial,'-struct','TRIAL_f');

end

%% APPLY FILTERING TO ENTIRE BATCH RUN
if RUN(3)
    
    %% LOAD DATA
    % choose batch directory
    batch_dir = '../output/trial_data/BATCH_oct16/'; %make sure to end with "/"
    SETS = batch_load(batch_dir);
    
    %% LOOP OVER DATA TO FILTER
    for set_i = 1:length(SETS)
        %get set and loop over trials
        set = SETS{set_i};
        
        %make output directory
        filepath = [batch_dir(1:end-1),'_filt/BatchSet_',set(1).TRIAL(1).file(2:3),'/'];
        mkdir(filepath)
        
        for trial_i = 1:length(set)
            trial = set(trial_i);
            
            %determine whether this is a single optimization or double (bias
            %algorithm) optimization
            if length(trial) == 1
                Nopt = 1;
            else
                Nopt = length(trial);
            end
            

            %% loop over optimizations
            for opt = 1:Nopt
                
                %call TRIAL struct and get info
                Tstruct = trial.TRIAL(opt);
                PTS = Tstruct.PTS_bio;
                ANG = Tstruct.ANG_bio;
                ypts = PTS(2,:,1); %assuming these are constant (MSE data)

                % get trajectory info
                traj = Tstruct.traj; %[T,N]
%                 prot = traj2prot(traj,Tstruct.s,ypts); %prot is [T,N]

                %apply low-pass bwfilt to the trajectory
                sfreq = 500; %500 fps video
                freq = 50; %Hz
                traj_f = bwfilt(traj,sfreq,0,freq);

                %update struct
                TRIAL_f = Tstruct;
                TRIAL_f.traj = traj_f; %put in filtered
                TRIAL_f.info = 0; %erase info

                %get info
                info = struct2info(TRIAL_f);
                TRIAL_f.info = info;
                
                %unpack info and re-calculate error
                prot_f = permute(info(1,:,:),[3 2 1]);
                derror_f = permute(info(3,:,:),[3 2 1]);
                error_f = permute(info(4,:,:),[3 2 1]);

                %update errors
                TRIAL_f.error = error_f;
                TRIAL_f.abserrmean =  mean(abs(derror_f));

                %package into new multi-dim struct
                TRIAL_out(Nopt).TRIAL = TRIAL_f;
                
            end
            %save TRIAL_f 
            file_trial = [filepath,Tstruct.file];
            save(file_trial,'-struct','TRIAL_out');
        end

    end
    fprintf('DONE FILTERING \n')
end







